name: Coverage Check and Docker Build

on:
  pull_request:
    branches:
      - main
jobs:
  coverage:
    name: Check coverage
    runs-on: ubuntu-latest
    outputs:
      build-docker: ${{ steps.set-output.outputs.build-docker }}
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
      PORT: ${{ secrets.PORT }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run tests
        run: npm test -- --coverage --coverageReporters=json-summary
      - name: Check coverage threshold
        id: set-output
        run: |
          COVERAGE=$(node -pe "require('./coverage/coverage-summary.json').total.statements.pct")
          echo "Total coverage: $COVERAGE%" 
          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "❌ Coverage is below 60%. Found: $COVERAGE%"
            echo "build-docker=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Coverage check passed with $COVERAGE%"
             echo "build-docker=true" >> $GITHUB_OUTPUT
          fi
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: coverage
    if: needs.coverage.outputs.build-docker == 'true'
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME}}/country-api-cld
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log into DockerHub
        run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
      - name: Set Image name
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build and push Docker image
        run: |
          docker build -t $IMAGE_NAME:${{ steps.vars.outputs.sha_short }} .
          docker tag $IMAGE_NAME:${{ steps.vars.outputs.sha_short }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ steps.vars.outputs.sha_short }}
          docker push $IMAGE_NAME:latest
