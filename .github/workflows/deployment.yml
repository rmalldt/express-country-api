name: Deploy Infrastructure and Applications

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'configuration/**'
      - '.github/workflows/deployment.yml'
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Deploy Infra with Terraform on AWS
    runs-on: ubuntu-latest
    # Run only on push events
    if: github.event_name == 'push'
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out tfplan
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        id: apply
        run: terraform apply -auto-approve

  build:
    name: Build docker images
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set Image name
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push MVC Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./server
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/countries-api-cld:${{ steps.vars.outputs.sha_short }}
            ${{ env.DOCKER_USERNAME}}/countries-api-cld:latest

      - name: Build and push Database Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./database
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/countries-db-cld:${{ steps.vars.outputs.sha_short }}
            ${{ env.DOCKER_USERNAME }}/countries-db-cld:latest

  deploy:
    name: Deploy Kubernetes pods in AWS infra
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Run kubectl commands
        run: |
          kubectl apply -f configuration/kubernetes/namespace.yaml
          kubectl apply -f configuration/kubernetes/api-configmap.yaml
          kubectl apply -f configuration/kubernetes/db-configmap.yaml
          kubectl apply -f configuration/kubernetes/db-deployment.yaml
          kubectl rollout status statefulset db -n countries --timeout=300s
          kubectl apply -f configuration/kubernetes/api-deployment.yaml
          kubectl rollout status deployment api -n countries --timeout=300s

  destroy:
    name: 'Destroy Infra on AWS'
    runs-on: ubuntu-latest
    # Only trigger for workflow_dispatch
    if: github.event_name == 'workflow_dispatch'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kubernetes config
        id: getconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Delete Kubernetes workloads (optional cleanup)
        run: |
          kubectl delete -f configuration/kubernetes/ --ignore-not-found=true

      - name: Terraform destroy
        id: destroy
        run: terraform destroy -auto-approve -input=false

      - name: Confirm Infrastructure Destruction
        run: echo "âœ… Infrastructure destroyed successfully"
